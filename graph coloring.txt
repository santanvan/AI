#Objective : Implement Graph coloring problem using python.
#Code:


# Adjacent Matrix
G =    [[ 0, 1, 1, 0, 1, 0],
	[ 1, 0, 1, 1, 0, 1],
	[ 1, 1, 0, 1, 1, 0],
	[ 0, 1, 1, 0, 0, 1],
	[ 1, 0, 1, 0, 0, 1],
	[ 0, 1, 0, 1, 1, 0]]

# initiate the name of node.
node = "abcdef"
t_={}
for i in range(len(G)):
	t_[node[i]] = i

# count degree of all node.
degree =[]
for i in range(len(G)):
	degree.append(sum(G[i]))

# initiate the possible color
colorDict = {}
for i in range(len(G)):
	colorDict[node[i]]=["Blue","Red","Yellow","Green"]

# sort the node depends on the degree
sortedNode=[]
index = []

# use selection sort
for i in range(len(degree)):
	_max = 0
	j = 0
	for j in range(len(degree)):
		if j not in index:
			if degree[j] > _max:
				_max = degree[j]
				idx = j
	index.append(idx)
	sortedNode.append(node[idx])

# The main process
theSolution={}
for n in sortedNode:
	setTheColor = colorDict[n]
	theSolution[n] = setTheColor[0]
	adjacentNode = G[t_[n]]
	for j in range(len(adjacentNode)):
		if adjacentNode[j]==1 and (setTheColor[0] in colorDict[node[j]]):
			colorDict[node[j]].remove(setTheColor[0])

# Print the solution
for t,w in sorted(theSolution.items()):
	print("Node",t," = â€œ,w)